""" Map leader to space ---------------------
let mapleader=" "

""" Plugins  --------------------------------
set easymotion
set surround
set commentary
set argtextobj
set highlightedyank
set textobj-entire
set ReplaceWithRegister
set multiple-cursors
set matchit
set NERDTree
set which-key
set textobj-indent
set functiontextobj
set peekaboo
set vim-paragraph-motion
set quickscope
set mini-ai

let g:NERDTreeMapActivateNode='l'
let g:NERDTreeMapJumpParent='h'
let g:NERDTreeMapNewDir = 'A'
let g:NERDTreeMapNewFile = 'a'
let g:NERDTreeMapToggleZoom = 'Z'

""" Plugin settings -------------------------
let g:argtextobj_pairs="[:],(:),<:>"

""" Common settings -------------------------
set clipboard+=unnamedplus
set history=100000
set showmode
set so=5
set nu
set rnu
set timeoutlen=1000
set hlsearch
set incsearch
set ignorecase
set smartcase
set ideamarks
set iskeyword+=#
set iskeyword+=-

""" Idea specific settings ------------------
set ideamarks
set ideajoin
set ideastatusicon=gray
set idearefactormode=keep
set noerrorbells
set visualbell

""" Mappings --------------------------------
nmap <tab> gt
nmap <S-tab> gT

map s gr
map ss grr
map S grr

omap ii <Plug>textobj-indent-ii
omap ai <Plug>textobj-indent-aI

map H ^
map L $

map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

map ]s /<script<cr>
map ]c /<style<cr>

map ]d <action>(GotoNextError)
map [d <action>(GotoPreviousError)

nmap <A-n> <Plug>NextWholeOccurrence
xmap <A-n> <Plug>NextWholeOccurrence
nmap g<A-n> <Plug>NextOccurrence
xmap g<A-n> <Plug>NextOccurrence
xmap <A-x> <Plug>SkipOccurrence
xmap <A-p> <Plug>RemoveOccurrence

map ) <action>(com.mnw.tabmover.actions.MoveTabDownAction)
map ( <action>(com.mnw.tabmover.actions.MoveTabUpAction)

map <CR> <action>(EditorSelectWord)
map <bs> <action>(EditorUnSelectWord)

map K <action>(ShowHoverInfo)

map <leader>E :NERDTreeToggle<cr>
map <leader>e :NERDTreeFind<cr>
map <leader>f <action>(GotoFile)
map <leader>F <action>(FindInPath)
map <leader>h :nohl<cr>
map <leader>w <action>(SaveAll)
map <leader>c :q<cr>
map <leader>o <action>(ActivateStructureToolWindow)
map <leader>m <action>(ReformatWithPrettierAction)<action>(Javascript.Linters.EsLint.Fix)
map <leader>M <action>(ReformatCode)
map <leader>, :source  ~/.ideavimrc <cr>
map <leader>bo <action>(CloseAllEditorsButActive)
map <leader>rd :%s/<div/<view/g<cr>:%s/<\/div/<\/view/g<cr>
map <leader>rr <action>(Json2ts)
map <leader>pp <action>(ManageRecentProjects)
map <leader>le <action>(ShowErrorDescription)


nmap gac viw<action>(StringManipulation.ToCamelCase)
vmap gac <action>(StringManipulation.ToCamelCase)

nmap gad viw<action>(StringManipulation.ToKebabCase)
vmap gad <action>(StringManipulation.ToKebabCase)

nmap gal viw<action>(osmedile.intellij.stringmanip.ToLowerCaseAction)
vmap gal <action>(osmedile.intellij.stringmanip.ToLowerCaseAction)

nmap gau viw<action>(osmedile.intellij.stringmanip.ToUpperCaseAction)
vmap gau <action>(osmedile.intellij.stringmanip.ToUpperCaseAction)

nmap gap viw<action>(StringManipulation.ToPascalCase)
vmap gap <action>(StringManipulation.ToPascalCase)

nmap gas viw<action>(StringManipulation.ToSnakeCase)
vmap gas <action>(StringManipulation.ToSnakeCase)

nmap gan viw<action>(StringManipulation.ToScreamingSnakeCase)
vmap gan <action>(StringManipulation.ToScreamingSnakeCase)

imap <C-l> <action>(copilot.applyInlays)

cmap <C-v> <C-r>*
